import type { BlockSpecifier } from "@truffle/codec";
import type BN from "bn.js";
import type { Provider as LegacyProvider } from "web3/providers";
declare type Log = {
    address: string;
    data: string;
    topics: string[];
    logIndex: number;
    transactionHash: string;
    transactionIndex: number;
    blockHash: string;
    blockNumber: number;
};
declare type PastLogsOptions = {
    toBlock?: string | number;
    fromBlock?: string | number;
    address?: string | string[];
};
declare type Eip1193Provider = {
    request: (options: {
        method: string;
        params?: unknown[] | object;
    }) => Promise<any>;
};
declare type FormattedBlock = {
    number: number;
    size: number;
    gasLimit: number;
    gasUsed: number;
    timestamp: number;
    hash: string;
    parentHash: string;
    mixHash: string;
    nonce: string;
    sha3Uncles: string;
    logsBloom: string;
    transactionsRoot: string;
    stateRoot: string;
    receiptsRoot: string;
    miner: string;
    difficulty: string;
    totalDifficulty: string;
    extraData: string;
    transactions: string[];
    uncles: string[];
};
/**
 * @hidden
 */
export declare type Provider = LegacyProvider | Eip1193Provider;
/**
 * @hidden
 */
export declare class ProviderAdapter {
    provider: Provider;
    constructor(provider: Provider);
    private sendRequest;
    getCode(address: string, block: BlockSpecifier): Promise<string>;
    getBlockByNumber(block: BlockSpecifier): Promise<FormattedBlock>;
    getPastLogs({ address, fromBlock, toBlock }: PastLogsOptions): Promise<Log[]>;
    getNetworkId(): Promise<number>;
    getBlockNumber(): Promise<number>;
    getBalance(address: string, block: BlockSpecifier): Promise<string>;
    getTransactionCount(address: string, block: BlockSpecifier): Promise<string>;
    getStorageAt(address: string, position: BN, block: BlockSpecifier): Promise<string>;
}
export {};
