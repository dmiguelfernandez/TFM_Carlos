"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderAdapter = void 0;
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default("decoder:adapter");
const stringWhitelist = [
    "latest",
    "pending",
    "genesis",
    "earliest"
];
const formatBlockSpecifier = (block) => {
    if (typeof block === "string" && stringWhitelist.includes(block)) {
        // block is one of 'latest', 'pending', 'earliest', or 'genesis'
        return block === "genesis"
            ? // convert old web3 input format which uses 'genesis'
                "earliest"
            : block;
    }
    else if (typeof block === "string" && !isNaN(parseInt(block))) {
        // block is a string representation of a number
        if (block.startsWith("0x"))
            return block;
        // convert to hex and add '0x' prefix in case block is decimal
        return `0x${parseInt(block).toString(16)}`;
    }
    else if (typeof block === "number") {
        return `0x${block.toString(16)}`;
    }
    else {
        throw new Error("The block specified must be a number or one of the strings 'latest'," +
            "'pending', or 'earliest'.");
    }
};
const formatBlock = (block) => {
    return Object.assign(Object.assign({}, block), { number: parseInt(block.number), size: parseInt(block.size), gasLimit: parseInt(block.gasLimit), gasUsed: parseInt(block.gasUsed), timestamp: parseInt(block.timestamp) });
};
// EIP-1193 providers use `request()` instead of `send()`
// NOTE this provider returns `response.result` already unwrapped
// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md
const isEip1193Provider = (provider) => "request" in provider;
/**
 * @hidden
 */
class ProviderAdapter {
    constructor(provider) {
        this.provider = provider;
    }
    sendRequest({ method, params, formatOutput }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.provider) {
                throw new Error("There is not a valid provider present.");
            }
            let result;
            if (isEip1193Provider(this.provider)) {
                result = yield this.provider.request({ method, params });
            }
            else {
                // HACK MetaMask's injected provider doesn't allow `.send()` with
                // a callback, so prefer `.sendAsync()` if it's defined
                const send = ("sendAsync" in this.provider
                    ? // uses `any` because LegacyProvider type doesn't define sendAsync
                        this.provider.sendAsync
                    : this.provider.send).bind(this.provider);
                // HACK this uses a manual `new Promise` instead of promisify because
                // users reported difficulty running this package in a browser extension
                result = yield new Promise((accept, reject) => send({
                    jsonrpc: "2.0",
                    id: new Date().getTime(),
                    method,
                    params
                }, ((error, response) => {
                    if (error) {
                        return reject(error);
                    }
                    const { result: res } = response;
                    accept(res);
                })));
            }
            if (formatOutput)
                return formatOutput(result);
            return result;
        });
    }
    getCode(address, block //making this one not regularized to support encoder
    ) {
        return __awaiter(this, void 0, void 0, function* () {
            const blockToFetch = formatBlockSpecifier(block);
            return yield this.sendRequest({
                method: "eth_getCode",
                params: [address, blockToFetch]
            });
        });
    }
    getBlockByNumber(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const blockToFetch = formatBlockSpecifier(block);
            return yield this.sendRequest({
                method: "eth_getBlockByNumber",
                params: [blockToFetch, false],
                formatOutput: formatBlock
            });
        });
    }
    getPastLogs({ address, fromBlock, toBlock }) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendRequest({
                method: "eth_getLogs",
                params: [{ fromBlock, toBlock, address }]
            });
        });
    }
    getNetworkId() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendRequest({
                method: "net_version",
                params: [],
                formatOutput: result => parseInt(result)
            });
        });
    }
    getBlockNumber() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendRequest({
                method: "eth_blockNumber",
                params: [],
                formatOutput: result => parseInt(result)
            });
        });
    }
    getBalance(address, block) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendRequest({
                method: "eth_getBalance",
                params: [address, formatBlockSpecifier(block)],
                formatOutput: result => parseInt(result).toString()
            });
        });
    }
    getTransactionCount(address, block) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendRequest({
                method: "eth_getTransactionCount",
                params: [address, formatBlockSpecifier(block)],
                formatOutput: result => parseInt(result).toString()
            });
        });
    }
    getStorageAt(address, position, block) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendRequest({
                method: "eth_getStorageAt",
                params: [address, `0x${position.toString(16)}`, formatBlockSpecifier(block)]
            });
        });
    }
}
exports.ProviderAdapter = ProviderAdapter;
//# sourceMappingURL=adapter.js.map